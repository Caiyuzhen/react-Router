{"ast":null,"code":"var _jsxFileName = \"/Users/Youzen/Desktop/react-Router/src/Login.js\",\n    _s = $RefreshSig$();\n\n// 🚀 编程式路由, 要跳转到对应的路由地址\n//纯跳转\n//How?\n//纯跳转第一步：导入 useNavigate 钩子函数\n//纯跳转第二步：执行钩子函数得到【跳转函数】\n//纯跳转第三步：定义跳转函数，传入目标【路由路径】\n//纯跳转第四步：执行跳转函数完成跳转（如果在跳转的时候不想加历史记录，可以传【额外的参数】 replace 为 true）\n//———————————————————————————————————————————————————————————————————————————————————————————————————————\n//跳转 + 传参\n//How？\n//🔥🔥方式一：searchParams 传参 (查询字符串传参)\n//🚗 1. 首先还是需要导入{useSearchParams, params }方法\n//传参\n//🚗2. navigage('/about?id=1001')\n//取参\n//🚗3. let [params] = useSearchParams()\n//🚗4. let id = params.get('id')\n//使用参数\n//🚗5. <div>  {id} </div>\n//🔥🔥方式二：params 传参 (路径传参)\n//🏍️ 1. 首先还是需要导入{useSearchParams, params }方法\n//传参\n//🏍️2. navigage('/about/1001')\n//取参\n//🏍️3. let params = useParams()\n//🏍️4. let id = params.id\n//使用参数\n//🏍️5. <div>  {id} </div>\n//纯跳转第一步：导入 useNavigate 钩子函数\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Login() {\n  _s();\n\n  //纯跳转第二步：执行钩子函数得到【跳转函数】,解构赋值\n  const navigate = useNavigate(); //纯跳转第三步：定义跳转函数，传入目标【路由路径】\n\n  function goAbout() {\n    //纯跳转第四步：执行跳转函数完成跳转（如果在跳转的时候不想加历史记录，可以传【额外的参数】 replace 为 true）\n    //navigate('/about') //这样的路由配置，还是可以通过浏览器的回退键来返回上一页\n    //🚗2.路由配置 + 传参, 传参方式为 ?id=XXX\n    navigate('/about?id=1001', {\n      replace: true\n    }); //这样就没法通过浏览器的返回了\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Login\", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: goAbout,\n      children: \" \\u8DF3\\u8F6C\\u5230\\u5173\\u4E8E \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Login, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["useNavigate","Login","navigate","goAbout","replace"],"sources":["/Users/Youzen/Desktop/react-Router/src/Login.js"],"sourcesContent":["// 🚀 编程式路由, 要跳转到对应的路由地址\n\n\n    //纯跳转\n      //How?\n          //纯跳转第一步：导入 useNavigate 钩子函数\n          //纯跳转第二步：执行钩子函数得到【跳转函数】\n          //纯跳转第三步：定义跳转函数，传入目标【路由路径】\n          //纯跳转第四步：执行跳转函数完成跳转（如果在跳转的时候不想加历史记录，可以传【额外的参数】 replace 为 true）\n\n\n//———————————————————————————————————————————————————————————————————————————————————————————————————————\n     \n\n    //跳转 + 传参\n\n      //How？\n        //🔥🔥方式一：searchParams 传参 (查询字符串传参)\n            //🚗 1. 首先还是需要导入{useSearchParams, params }方法\n\n            //传参\n              //🚗2. navigage('/about?id=1001')\n\n            //取参\n              //🚗3. let [params] = useSearchParams()\n              //🚗4. let id = params.get('id')\n\n            //使用参数\n              //🚗5. <div>  {id} </div>\n\n\n        //🔥🔥方式二：params 传参 (路径传参)\n            //🏍️ 1. 首先还是需要导入{useSearchParams, params }方法\n\n            //传参\n              //🏍️2. navigage('/about/1001')\n\n            //取参\n              //🏍️3. let params = useParams()\n              //🏍️4. let id = params.id\n\n            //使用参数\n              //🏍️5. <div>  {id} </div>\n\n\n\n//纯跳转第一步：导入 useNavigate 钩子函数\nimport {useNavigate} from 'react-router-dom'\n\n\nfunction Login(){\n\n  \n  //纯跳转第二步：执行钩子函数得到【跳转函数】,解构赋值\n  const navigate = useNavigate()\n\n\n  //纯跳转第三步：定义跳转函数，传入目标【路由路径】\n  function goAbout (){\n    //纯跳转第四步：执行跳转函数完成跳转（如果在跳转的时候不想加历史记录，可以传【额外的参数】 replace 为 true）\n    //navigate('/about') //这样的路由配置，还是可以通过浏览器的回退键来返回上一页\n    \n    //🚗2.路由配置 + 传参, 传参方式为 ?id=XXX\n    navigate('/about?id=1001', {replace: true}) //这样就没法通过浏览器的返回了\n    \n  }\n\n\n  return(\n    <div>\n      Login\n      <button onClick={goAbout}> 跳转到关于 </button>\n    </div>\n  )\n}\n\nexport default Login"],"mappings":";;;AAAA;AAGI;AACE;AACI;AACA;AACA;AACA;AAGV;AAGI;AAEE;AACE;AACI;AAEA;AACE;AAEF;AACE;AACA;AAEF;AACE;AAGN;AACI;AAEA;AACE;AAEF;AACE;AACA;AAEF;AACE;AAId;AACA,SAAQA,WAAR,QAA0B,kBAA1B;;;AAGA,SAASC,KAAT,GAAgB;EAAA;;EAGd;EACA,MAAMC,QAAQ,GAAGF,WAAW,EAA5B,CAJc,CAOd;;EACA,SAASG,OAAT,GAAmB;IACjB;IACA;IAEA;IACAD,QAAQ,CAAC,gBAAD,EAAmB;MAACE,OAAO,EAAE;IAAV,CAAnB,CAAR,CALiB,CAK2B;EAE7C;;EAGD,oBACE;IAAA,iCAEE;MAAQ,OAAO,EAAED,OAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAMD;;GAxBQF,K;UAIUD,W;;;KAJVC,K;AA0BT,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}