{"ast":null,"code":"var _jsxFileName = \"/Users/Youzen/Desktop/react-Router/src/App.js\";\n//🚀 路由地址配置\n//🔥🔥🔥核心组件 Router 的类型有两个，然后一个 React 应用只需要用一次\n//🌟哈希 Router   ————  HashRouter\n//使用 URL 的哈希值实现会，带个 #/XXX\n//🌟浏览器 Router ————  BrowserRouter（推荐）\n//使用 H5 的 history.pushState API 实现 \n//🔥🔥🔥核心组件 Link\n//🌟用于指定导航连接，完成路由跳转，最后渲染出来是个 A 链接\n//本质就是  <a href=\"#/XXX\"> </a>\n//1.引入路由渲染组件\nimport Home from './Home';\nimport About from './About';\nimport Login from './Login.js'; //2.引入 react-router 函数\n\nimport { HashRouter, BrowserRouter, Routes, Route, Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  return (\n    /*#__PURE__*/\n    //3.👇进行路由配置,声明当前是要用一个非 hash(哈希) 模式的路由\n    _jsxDEV(BrowserRouter, {\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: \"\\u9996\\u9875\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/about\",\n        children: \"\\u5173\\u4E8E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 38\n          }, this),\n          children: \"    \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/about:id\",\n          element: /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 43\n          }, this),\n          children: \"  \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/login\",\n          element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 40\n          }, this),\n          children: \"  \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }, this) //🍎本质是通过 Link 绑定 a 标签跟路由地址，然后通过 path 来匹配路由地址，匹配上了就把这个 a 标签的内容渲染出来\n    // <HashRouter>\n    //   {/* 4.指定路由对象（谁） */}\n    //   {/* 5.通过 to 属性来指定【那个 a 标签】对应哪个【路由地址】 */}\n    //   <Link to='/'>首页</Link>\n    //   <Link to='/about'>关于</Link>\n    //   {/* 6.Routes 配置路由出口 */}\n    //   <Routes>\n    //     {/* 7.通过 Route path 来设置匹配的【路由地址】，通过  element 来【匹配】对应路由要渲染的【渲染组件】 */}\n    //     <Route path='/'       element={<Home />} >    </Route>\n    //     <Route path='/about'  element={<About />}>    </Route>\n    //   </Routes>     \n    // </HashRouter>\n\n  );\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Home","About","Login","HashRouter","BrowserRouter","Routes","Route","Link","App"],"sources":["/Users/Youzen/Desktop/react-Router/src/App.js"],"sourcesContent":["//🚀 路由地址配置\n\n  //🔥🔥🔥核心组件 Router 的类型有两个，然后一个 React 应用只需要用一次\n    //🌟哈希 Router   ————  HashRouter\n        //使用 URL 的哈希值实现会，带个 #/XXX\n\n\n    //🌟浏览器 Router ————  BrowserRouter（推荐）\n        //使用 H5 的 history.pushState API 实现 \n\n      \n\n  //🔥🔥🔥核心组件 Link\n      //🌟用于指定导航连接，完成路由跳转，最后渲染出来是个 A 链接\n          //本质就是  <a href=\"#/XXX\"> </a>\n\n\n\n\n//1.引入路由渲染组件\nimport Home from './Home';\nimport About from './About'\nimport Login from './Login.js'\n//2.引入 react-router 函数\nimport { HashRouter, BrowserRouter, Routes, Route, Link } from \"react-router-dom\"\n\n\n\nfunction App() {\n  return (\n    \n    //3.👇进行路由配置,声明当前是要用一个非 hash(哈希) 模式的路由\n    <BrowserRouter>\n      {/* 4.通过 to 属性来指定【元素】跟要跳转的【路由地址】 */}\n     {/* 5.通过 to 属性来指定【那个 a 标签】对应哪个【路由地址】 */}\n      <Link to='/'>首页</Link>\n      <Link to='/about'>关于</Link>\n\n      {/* 6.Routes 配置路由出口 */}\n      <Routes>\n        {/* 7.通过 Route path 来设置对应的【路由地址】，通过  element 来配置要渲染的【渲染组件】 */}\n        <Route path='/'     element={<Home />} >    </Route>\n\n        {/* 👇假设 login 里边用的是 searchParams 传参 (查询字符串传参) 的方法，这里就这样写 */}\n        {/* <Route path='/about'  element={<About />}>  </Route> */}\n        \n        {/* 假设 login 里边用的是 params 传参 (路径传参) 的方法，这里就这样写  */}\n        <Route path='/about:id'  element={<About />}>  </Route>\n\n        <Route path='/login'  element={<Login />}>  </Route>\n      </Routes>     \n    </BrowserRouter>\n\n\n  //🍎本质是通过 Link 绑定 a 标签跟路由地址，然后通过 path 来匹配路由地址，匹配上了就把这个 a 标签的内容渲染出来\n    // <HashRouter>\n    //   {/* 4.指定路由对象（谁） */}\n    //   {/* 5.通过 to 属性来指定【那个 a 标签】对应哪个【路由地址】 */}\n    //   <Link to='/'>首页</Link>\n    //   <Link to='/about'>关于</Link>\n\n    //   {/* 6.Routes 配置路由出口 */}\n    //   <Routes>\n    //     {/* 7.通过 Route path 来设置匹配的【路由地址】，通过  element 来【匹配】对应路由要渲染的【渲染组件】 */}\n    //     <Route path='/'       element={<Home />} >    </Route>\n    //     <Route path='/about'  element={<About />}>    </Route>\n    //   </Routes>     \n    // </HashRouter>\n\n  )\n}\n\nexport default App;\n"],"mappings":";AAAA;AAEE;AACE;AACI;AAGJ;AACI;AAIN;AACI;AACI;AAKV;AACA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,YAAlB,C,CACA;;AACA,SAASC,UAAT,EAAqBC,aAArB,EAAoCC,MAApC,EAA4CC,KAA5C,EAAmDC,IAAnD,QAA+D,kBAA/D;;;AAIA,SAASC,GAAT,GAAe;EACb;IAAA;IAEE;IACA,QAAC,aAAD;MAAA,wBAGE,QAAC,IAAD;QAAM,EAAE,EAAC,GAAT;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAHF,eAIE,QAAC,IAAD;QAAM,EAAE,EAAC,QAAT;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAJF,eAOE,QAAC,MAAD;QAAA,wBAEE,QAAC,KAAD;UAAO,IAAI,EAAC,GAAZ;UAAoB,OAAO,eAAE,QAAC,IAAD;YAAA;YAAA;YAAA;UAAA,QAA7B;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAFF,eAQE,QAAC,KAAD;UAAO,IAAI,EAAC,WAAZ;UAAyB,OAAO,eAAE,QAAC,KAAD;YAAA;YAAA;YAAA;UAAA,QAAlC;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QARF,eAUE,QAAC,KAAD;UAAO,IAAI,EAAC,QAAZ;UAAsB,OAAO,eAAE,QAAC,KAAD;YAAA;YAAA;YAAA;UAAA,QAA/B;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAVF;MAAA;QAAA;QAAA;QAAA;MAAA,QAPF;IAAA;MAAA;MAAA;MAAA;IAAA,QAHF,CAyBA;IACE;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;EAtCF;AAyCD;;KA1CQA,G;AA4CT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}