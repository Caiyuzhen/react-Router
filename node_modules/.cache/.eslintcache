[{"/Users/Youzen/Desktop/react-Router/src/index.js":"1","/Users/Youzen/Desktop/react-Router/src/路由的基础跳转传参取参/About.js":"2","/Users/Youzen/Desktop/react-Router/src/路由的基础跳转传参取参/App.js":"3","/Users/Youzen/Desktop/react-Router/src/路由的基础跳转传参取参/Home.js":"4","/Users/Youzen/Desktop/react-Router/src/路由的基础跳转传参取参/Login.js":"5","/Users/Youzen/Desktop/react-Router/src/嵌套路由页/App.js":"6","/Users/Youzen/Desktop/react-Router/src/嵌套路由页/Layout.js":"7","/Users/Youzen/Desktop/react-Router/src/嵌套路由页/Board.js":"8","/Users/Youzen/Desktop/react-Router/src/嵌套路由页/Article.js":"9","/Users/Youzen/Desktop/react-Router/src/嵌套路由页/Login.js":"10","/Users/Youzen/Desktop/react-Router/src/嵌套路由页/404.js":"11"},{"size":275,"mtime":1654791450707,"results":"12","hashOfConfig":"13"},{"size":1297,"mtime":1654788708748,"results":"14","hashOfConfig":"13"},{"size":2720,"mtime":1654788907601,"results":"15","hashOfConfig":"13"},{"size":207,"mtime":1654706334301,"results":"16","hashOfConfig":"13"},{"size":2885,"mtime":1654788348827,"results":"17","hashOfConfig":"13"},{"size":942,"mtime":1654792188045,"results":"18","hashOfConfig":"13"},{"size":211,"mtime":1654790280773,"results":"19","hashOfConfig":"13"},{"size":126,"mtime":1654789693141,"results":"20","hashOfConfig":"13"},{"size":132,"mtime":1654789687858,"results":"21","hashOfConfig":"13"},{"size":78,"mtime":1654789492443,"results":"22","hashOfConfig":"13"},{"size":180,"mtime":1654791968685,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"fzadhq",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"31"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/Youzen/Desktop/react-Router/src/index.js",[],[],"/Users/Youzen/Desktop/react-Router/src/路由的基础跳转传参取参/About.js",["60"],[],"//🌞注意，首先得在 App.js 定义好路由！\n\n\n\n//获取 login 页面通过路由传过来的参数\n\n\n\n\n//🚗 1.导入方法\nimport {useSearchParams,useParams} from 'react-router-dom'\n\n\n\n\nfunction About (){\n  //🔥🔥方式一：searchParams 传参 (查询字符串传参)\n  // //🚗3.解构赋值，获得来自 login 的参数，params 是一个对象，里边有一个 get 方法，可以获取对应的参数\n  // let [params] = useSearchParams()\n\n  // //🚗4.把【参数的名称】作为 get 方法的【实参】,用 params.get() 方法来获取对应的对象的参数，id 就是那个对象\n  // let id = params.get('id')//因为要传入参数名称在 login 那边叫做 id\n  // let name = params.get('name')\n  // //let school = params.('school')\n  // //...可以获取很多参数\n\n\n  \n  \n  //🔥🔥方式二：params 传参 (路径传参)\n  let  params = useParams() //params 直接就是一个对象！\n\n  //🏍️4. let id = params.id\n  let id =params.id\n\n\n  return(\n    <div\n      style={{\n        backgroundColor:'#ccc222',\n        height:\"2rem\",\n        lineHeight:\"2rem\"\n      }}\n    // 🚗5.使用参数\n    // >About:得到的参数值为{id}+{name}</div>\n\n    //🏍️5.使用参数\n    >About:得到的参数值为{id}</div>\n  )\n}\n\n\nexport default About",[],"/Users/Youzen/Desktop/react-Router/src/路由的基础跳转传参取参/App.js",["61"],[],"//🚀 路由地址配置\n\n  //🔥🔥🔥核心组件 Router 的类型有两个，然后一个 React 应用只需要用一次\n    //🌟哈希 Router   ————  HashRouter\n        //使用 URL 的哈希值实现会，带个 #/XXX\n\n\n    //🌟浏览器 Router ————  BrowserRouter（推荐）\n        //使用 H5 的 history.pushState API 实现 \n\n      \n\n  //🔥🔥🔥核心组件 Link\n      //🌟用于指定导航连接，完成路由跳转，最后渲染出来是个 A 链接\n          //本质就是  <a href=\"#/XXX\"> </a>\n\n\n\n\n//1.引入路由渲染组件\nimport Home from './Home';\nimport About from './About'\nimport Login from './Login.js'\n//2.引入 react-router 函数\nimport { HashRouter, BrowserRouter, Routes, Route, Link } from \"react-router-dom\"\n\n\n\nfunction App() {\n  return (\n    \n    //3.👇进行路由配置,声明当前是要用一个非 hash(哈希) 模式的路由\n    <BrowserRouter>\n      {/* 4.通过 to 属性来指定【元素】跟要跳转的【路由地址】 */}\n     {/* 5.通过 to 属性来指定【那个 a 标签】对应哪个【路由地址】 */}\n      <Link to='/'>首页</Link>\n      <Link to='/about'>关于</Link>\n\n      {/* 6.Routes 配置路由出口 */}\n      <Routes>\n        {/* 7.通过 Route path 来设置对应的【路由地址】，通过  element 来配置要渲染的【渲染组件】 */}\n        <Route path='/'     element={<Home />} >    </Route>\n\n        {/* 👇假设 login 里边用的是 searchParams 传参 (查询字符串传参) 的方法，这里就这样写 */}\n        {/* <Route path='/about'  element={<About />}>  </Route> */}\n\n        {/* 👇假设 login 里边用的是 params 传参 (路径传参) 的方法，这里就这样写  */}\n        <Route path='/about/:id'  element={<About />}>  </Route>\n\n        <Route path='/login'  element={<Login />}>  </Route>\n      </Routes>     \n    </BrowserRouter>\n\n\n  //🍎本质是通过 Link 绑定 a 标签跟路由地址，然后通过 path 来匹配路由地址，匹配上了就把这个 a 标签的内容渲染出来\n    // <HashRouter>\n    //   {/* 4.指定路由对象（谁） */}\n    //   {/* 5.通过 to 属性来指定【那个 a 标签】对应哪个【路由地址】 */}\n    //   <Link to='/'>首页</Link>\n    //   <Link to='/about'>关于</Link>\n\n    //   {/* 6.Routes 配置路由出口 */}\n    //   <Routes>\n    //     {/* 7.通过 Route path 来设置匹配的【路由地址】，通过  element 来【匹配】对应路由要渲染的【渲染组件】 */}\n    //     <Route path='/'       element={<Home />} >    </Route>\n    //     <Route path='/about'  element={<About />}>    </Route>\n    //   </Routes>     \n    // </HashRouter>\n\n  )\n}\n\nexport default App;\n","/Users/Youzen/Desktop/react-Router/src/路由的基础跳转传参取参/Home.js",[],[],"/Users/Youzen/Desktop/react-Router/src/路由的基础跳转传参取参/Login.js",[],[],"/Users/Youzen/Desktop/react-Router/src/嵌套路由页/App.js",["62"],[],"/Users/Youzen/Desktop/react-Router/src/嵌套路由页/Layout.js",[],[],"/Users/Youzen/Desktop/react-Router/src/嵌套路由页/Board.js",[],[],"/Users/Youzen/Desktop/react-Router/src/嵌套路由页/Article.js",[],[],"/Users/Youzen/Desktop/react-Router/src/嵌套路由页/Login.js",[],[],"/Users/Youzen/Desktop/react-Router/src/嵌套路由页/404.js",[],[],{"ruleId":"63","severity":1,"message":"64","line":11,"column":9,"nodeType":"65","messageId":"66","endLine":11,"endColumn":24},{"ruleId":"63","severity":1,"message":"67","line":25,"column":10,"nodeType":"65","messageId":"66","endLine":25,"endColumn":20},{"ruleId":"63","severity":1,"message":"68","line":7,"column":39,"nodeType":"65","messageId":"66","endLine":7,"endColumn":43},"no-unused-vars","'useSearchParams' is defined but never used.","Identifier","unusedVar","'HashRouter' is defined but never used.","'Link' is defined but never used."]